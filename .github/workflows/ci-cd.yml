name: Bookie CI/CD

on:
  pull_request:
    branches: [main]  # Runs init/validate/plan for PRs to main
  push:
    branches: [main]   # Deploys dev & staging
  workflow_dispatch:    # Manual QA/Prod deploys
    inputs:
      environment:
        description: 'Environment to deploy (qa/prod)'
        required: true
        type: choice
        options:
          - qa
          - prod

jobs:
  lint: # Run ESLint
  # This job runs ESLint to check code quality
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test: # Run Jest Tests
  # This job runs Jest tests to ensure code correctness
    name: Run Jest Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run Jest
        run: npm run test

  terraform_pr_plan_dev: # Terraform Plan for PRs
    name: Terraform Initialize, Plan and Validate dev
    # This job runs Terraform init, validate, and plan for the dev environment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: dev
    needs: test
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"
    defaults:
      run:
        working-directory: ./.aws/workspaces/services
    steps:
      - uses: actions/checkout@v4

      - name: Setup Dev Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (dev)
        run: terraform init -input=false -reconfigure
        env:
          TF_WORKSPACE: dev



      - name: Terraform Validate Dev
        run: terraform validate

      - name: Terraform Plan Dev
        run: terraform plan -var-file=.aws/config/use1.dev.bk.tfvars

  terraform_pr_plan_staging: # Terraform Plan for PRs
    name: Terraform Initialize, Plan and Validate staging
  # This job runs Terraform init, validate, and plan for the staging environment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: staging
    needs: test
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"
    defaults:
      run:
        working-directory: ./.aws/workspaces/services
    steps:
      - uses: actions/checkout@v4

      - name: Setup Staging Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (staging)
        run: terraform init -input=false -reconfigure
        env:
          TF_WORKSPACE: staging



      - name: Terraform Validate staging
        run: terraform validate

      - name: Terraform Plan staging
        run: terraform plan -var-file=.aws/config/use1.staging.bk.tfvars
  
  terraform_pr_plan_qa: # Terraform Plan for PRs
      name:  Terraform Initialize, Plan and Validate qa
    # This job runs Terraform init, validate, and plan for the QA environment
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest
      environment: qa
      needs: test
      env:
        TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
        TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
        TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"
      defaults:
        run:
          working-directory: ./.aws/workspaces/services
      steps:
        - uses: actions/checkout@v4

        - name: Setup QA Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.7.5

        - name: Terraform Init (qa)
          run: terraform init -input=false -reconfigure
          env:
            TF_WORKSPACE: qa



        - name: Terraform Validate qa
          run: terraform validate

        - name: Terraform Plan qa
          run: terraform plan -var-file=.aws/config/use1.qa.bk.tfvars

  terraform_pr_plan_prod: # Terraform Plan for PRs
    name: Terraform Initialize, Plan and Validate prod
    # This job runs Terraform init, validate, and plan for the prod environment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: prod
    needs: test
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"
    defaults:
      run:
        working-directory: ./.aws/workspaces/services
    steps:
      - uses: actions/checkout@v4

      - name: Setup Prod Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (prod)
        run: terraform init -input=false -reconfigure
        env:
          TF_WORKSPACE: prod




      - name: Terraform Validate prod
        run: terraform validate

      - name: Terraform Plan prod
        run: terraform plan -var-file=.aws/config/use1.prod.bk.tfvars

  dev_deployment_on_merge:
        name: Deploy Dev on (Merge to Main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        runs-on: ubuntu-latest
        environment: dev
        needs: test
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
          TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
          TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"
        defaults:
          run:
            working-directory: ./.aws/workspaces/services
        outputs:
          bucket: ${{ steps.export.outputs.bucket }}
          dist: ${{ steps.export.outputs.dist }}
        steps:
          - uses: actions/checkout@v4

          - name: Setup dev Terraform
            uses: hashicorp/setup-terraform@v3
            with:
              terraform_version: 1.7.5

          - name: Terraform Init (dev)
            run: terraform init -input=false -reconfigure
            env:
              TF_WORKSPACE: dev

          - name: Terraform Validate Dev
            run: terraform validate

          - name: Terraform Plan Dev
            run: terraform plan -var-file=.aws/config/use1.dev.bk.tfvars
          
          - name: Terraform Apply Dev
            run: terraform apply -auto-approve -var-file=.aws/config/use1.dev.bk.tfvars

          - name: Export Terraform Outputs
            id: export
            run: |
              echo "bucket=$(terraform output -raw bucket_name)" >> "$GITHUB_OUTPUT"
              echo "dist=$(terraform output -raw distribution_id)" >> "$GITHUB_OUTPUT"

    
  deploy_web_dev:
        name: Upload Web Build + Invalidate CF (Dev)
        needs: dev_deployment_on_merge
        runs-on: ubuntu-latest
        environment: dev
        env:
          AWS_REGION: us-east-1
          BUCKET_NAME: ${{ needs.dev_deployment_on_merge.outputs.bucket }}
          DIST_ID: ${{ needs.dev_deployment_on_merge.outputs.dist }}
        steps:
          - uses: actions/checkout@v4

          # Build Expo web bundle
          - name: Install deps & build
            run: |
              npm ci
              npx expo export:web --output-dir web-build

          # Upload to S3
          - name: Sync to S3
            uses: jakejarvis/s3-sync-action@v0.5.1
            with:
              args: --acl public-read --delete
            env:
              AWS_S3_BUCKET: ${{ env.BUCKET_NAME }}
              AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_REGION:            ${{ env.AWS_REGION }}
              SOURCE_DIR: web-build

          # Invalidate CloudFront
          - name: Invalidate CF
            run: |
              aws cloudfront create-invalidation --distribution-id "$DIST_ID" \
                --paths "/*"
            env:
              AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  staging_deployment_on_merge: # Terraform Plan for PRs
      name: DeploysStaging on (Merge to Main)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      runs-on: ubuntu-latest
      environment: staging
      needs: test
      env:
        TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
        TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
        TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"
      defaults:
        run:
          working-directory: ./.aws/workspaces/services
      steps:
        - uses: actions/checkout@v4

        - name: Setup staging Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.7.5

        - name: Terraform Init (staging)
          run: terraform init -input=false -reconfigure
          env:
            TF_WORKSPACE: staging




        - name: Terraform Validate Staging
          run: terraform validate

        - name: Terraform Plan Staging
          run: terraform plan -var-file=.aws/config/use1.staging.bk.tfvars
        
        - name: Terraform Apply Staging
          run: terraform apply -auto-approve -var-file=.aws/config/use1.staging.bk.tfvars


  approve_and_delpoy_qa: # Terraform Plan for PRs
    name: Approve and Deploy QA 
    if: github.event_name == 'workflow_dispatch'  && github.event.inputs.environment == 'qa'
    runs-on: ubuntu-latest
    environment: qa
    needs: test
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"
    defaults:
      run:
        working-directory: ./.aws/workspaces/services
    steps:
      - uses: actions/checkout@v4

      - name: Setup QA Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (qa)
        run: terraform init -input=false -reconfigure
        env:
          TF_WORKSPACE: qa


      - name: Terraform Validate QA
        run: terraform validate

      - name: Terraform Plan QA
        run: terraform plan -var-file=.aws/config/use1.qa.bk.tfvars

      - name: Terraform Apply QA
        run: terraform apply -auto-approve -var-file=.aws/config/use1.qa.bk.tfvars

  approve_and_deploy_prod: # Terraform Plan for PRs
    name: Approve and Deploy Prod
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: prod
    needs: test
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"
    defaults:
      run:
        working-directory: ./.aws/workspaces/services
    steps:
      - uses: actions/checkout@v4

      - name: Setup Prod Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (prod)
        run: terraform init -input=false -reconfigure
        env:
          TF_WORKSPACE: prod



      - name: Terraform Validate Prod
        run: terraform validate

      - name: Terraform Plan Prod
        run: terraform plan -var-file=.aws/config/use1.prod.bk.tfvars

      - name: Terraform Apply Prod
        run: terraform apply -auto-approve -var-file=.aws/config/use1.prod.bk.tfvars