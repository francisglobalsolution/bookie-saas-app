name: Deploy & Auto Deploy

on:
  push:
    branches: [main]

jobs:
  # ---------- DEV TERRAFORM (VCS-driven in TFC) ----------
  dev_deployment_on_merge:
    name: Deploy Dev on (Merge to Main)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: ./.aws/workspaces/services/dev
    outputs:
      bucket: ${{ steps.export.outputs.bucket }}
      dist: ${{ steps.export.outputs.dist }}
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"

    steps:
      - uses: actions/checkout@v4

      - name: Setup dev Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (dev)
        run: terraform init -input=false

      - name: Terraform Validate Dev
        run: terraform validate

      - name: Terraform Plan Dev
        run: terraform plan

      # TFC (VCS) will apply; we just wait for outputs
      - name: Export Terraform Outputs (wait for TFC state)
        id: export
        shell: bash
        run: |
          set -euo pipefail
          terraform init -input=false >/dev/null
          for i in {1..30}; do
            if terraform output -json > /tmp/outs.json 2>/dev/null; then
              bucket=$(jq -r '.bucket_name.value // empty' /tmp/outs.json)
              dist=$(jq -r '.distribution_id.value // empty' /tmp/outs.json)
              if [[ -n "$bucket" && -n "$dist" ]]; then
                echo "bucket=$bucket" >> "$GITHUB_OUTPUT"
                echo "dist=$dist"     >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
            echo "Waiting for Terraform Cloud to finish apply and publish state... ($i/30)"
            sleep 20
          done
          echo "Outputs not available yet (no applied state or wrong workspace)"; exit 1

  # ---------- DEV WEB DEPLOY ----------
  deploy_web_dev:
    name: Upload Web Build + Invalidate CF (Dev)
    needs: dev_deployment_on_merge
    if: ${{ needs.dev_deployment_on_merge.result == 'success' && needs.dev_deployment_on_merge.outputs.bucket != '' && needs.dev_deployment_on_merge.outputs.dist != '' }}
    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_REGION: us-east-1
      BUCKET_NAME: ${{ needs.dev_deployment_on_merge.outputs.bucket }}
      DIST_ID: ${{ needs.dev_deployment_on_merge.outputs.dist }}

    steps:
      - uses: actions/checkout@v4

      - name: Install deps & build
        run: |
          npm set fetch-retries 5
          npm set fetch-retry-maxtimeout 600000
          npm ci --no-audit --fund=false
          npx expo export --platform web --output-dir web-build
          echo "Built files:" && ls -la web-build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify outputs & build dir
        shell: bash
        run: |
          set -euo pipefail
          echo "BUCKET_NAME='${BUCKET_NAME}'"
          echo "DIST_ID='${DIST_ID}'"
          [[ -n "${BUCKET_NAME}" ]] || { echo "❌ BUCKET_NAME is empty"; exit 1; }
          [[ -n "${DIST_ID}"     ]] || { echo "❌ DIST_ID is empty"; exit 1; }
          [[ -d web-build        ]] || { echo "❌ web-build directory missing"; ls -la; exit 1; }

      - name: Sync to S3
        run: aws s3 sync web-build "s3://${BUCKET_NAME}" --acl public-read --delete

      - name: Invalidate CF
        if: ${{ env.DIST_ID != '' }}
        run: aws cloudfront create-invalidation --distribution-id "${DIST_ID}" --paths "/*"

  # ---------- STAGING TERRAFORM (VCS-driven in TFC) ----------
  staging_deployment_on_merge:
    name: DeploysStaging on (Merge to Main)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    defaults:
      run:
        working-directory: ./.aws/workspaces/services/staging
    outputs:
      bucket: ${{ steps.export.outputs.bucket }}
      dist: ${{ steps.export.outputs.dist }}
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TERRAFORM_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      TF_CLOUD_ORGANIZATION: "Francis_Global_Solution"

    steps:
      - uses: actions/checkout@v4

      - name: Setup staging Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (staging)
        run: terraform init -input=false

      - name: Terraform Validate Staging
        run: terraform validate

      - name: Terraform Plan Staging
        run: terraform plan

      - name: Export Terraform Outputs (wait for TFC state)
        id: export
        shell: bash
        run: |
          set -euo pipefail
          terraform init -input=false >/dev/null
          for i in {1..30}; do
            if terraform output -json > /tmp/outs.json 2>/dev/null; then
              bucket=$(jq -r '.bucket_name.value // empty' /tmp/outs.json)
              dist=$(jq -r '.distribution_id.value // empty' /tmp/outs.json)
              if [[ -n "$bucket" && -n "$dist" ]]; then
                echo "bucket=$bucket" >> "$GITHUB_OUTPUT"
                echo "dist=$dist"     >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
            echo "Waiting for Terraform Cloud to finish apply and publish state... ($i/30)"
            sleep 20
          done
          echo "Outputs not available yet (no applied state or wrong workspace)"; exit 1

  # ---------- STAGING WEB DEPLOY ----------
  staging_web_deploy:
    name: Upload Web Build + Invalidate CF (Staging)
    needs: staging_deployment_on_merge
    if: ${{ needs.staging_deployment_on_merge.result == 'success' && needs.staging_deployment_on_merge.outputs.bucket != '' && needs.staging_deployment_on_merge.outputs.dist != '' }}
    runs-on: ubuntu-latest
    environment: staging
    env:
      AWS_REGION: us-east-1
      BUCKET_NAME: ${{ needs.staging_deployment_on_merge.outputs.bucket }}
      DIST_ID: ${{ needs.staging_deployment_on_merge.outputs.dist }}

    steps:
      - uses: actions/checkout@v4

      - name: Install deps & build
        run: |
          npm set fetch-retries 5
          npm set fetch-retry-maxtimeout 600000
          npm ci --no-audit --fund=false
          npx expo export --platform web --output-dir web-build
          echo "Built files:" && ls -la web-build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify outputs & build dir
        shell: bash
        run: |
          set -euo pipefail
          echo "BUCKET_NAME='${BUCKET_NAME}'"
          echo "DIST_ID='${DIST_ID}'"
          [[ -n "${BUCKET_NAME}" ]] || { echo "❌ BUCKET_NAME is empty"; exit 1; }
          [[ -n "${DIST_ID}"     ]] || { echo "❌ DIST_ID is empty"; exit 1; }
          [[ -d web-build        ]] || { echo "❌ web-build directory missing"; ls -la; exit 1; }

      - name: Sync to S3
        run: aws s3 sync web-build "s3://${BUCKET_NAME}" --acl public-read --delete

      - name: Invalidate CF
        if: ${{ env.DIST_ID != '' }}
        run: aws cloudfront create-invalidation --distribution-id "${DIST_ID}" --paths "/*"
